Register Encoding:
	6 bits

Op Determine:
	[0:2]:	FORMAT
	[3:7]:	MAJOR

Formats:
	R:
		[8:13]:		RD
		[14:19]:	RS1
		[20:25]:	RS2
		[26:31]:	MINOR
	I:
		[8:13]:		RD
		[14:15]:	MINOR
		[16:31]:	IMMEDIATE (16 bits)
	S:
		[8:13]:		RS3
		[14:19]:	RS1
		[20:25]:	RS2
		[26:31]:	MINOR
	U:
		[8:31]:		MINOR
	B:
		[8:9]:		TEST_CONDITION
		[10:13]:	OFFSET[2:5]
		[14:19]:	RS1
		[20:25]:	RS2
		[26:31]:	OFFSET[6:11]


Major Reserved = 00000000

Major Load = 001 00001, R Format:
	Minor Variants:
		L(B,H,W,Q) = XNNNSS:
			ALIGN = (1 << S)
			WIDTH = ALIGN * 8

			N = N & (ALIGN -  1)

			BEGIN = WIDTH * (N+1)
			END = WIDTH * N

			RD[BEGIN:END] <= (RS1 + (RS2 * ALIGN))

Major Integer Arithmetic = 001 00010, R Format:
	Minor Variants:
		ADD = 000000:
			RD = RS1 + RS2
			
Major Load Immediate = 010 00001, I Format:
	Minor Variants:
		LI(B,MB,MH,H) = NN:
			BEGIN = 16 * (N+1)
			END = 16 * N
			RD[BEGIN:END] <= IMMEDIATE

Major Store = 011 00001, S Format:
	Minor Variants:
		S(B,H,W,Q): 	XXXXSS:
			ALIGN = (2^S)
			WIDTH = ALIGN * 8

			BEGIN = 0
			END = WIDTH

			RS3[BEGIN:END] => (RS1 + (RS2 * ALIGN))

Major Branch = 100 00001, B Format:
	Minor Variants:
		BEQ:	00:
			if (RS1 == RS2) {
				PC += OFFSET;
			}
		BNE:	01:
			if (RS1 != RS2) {
				PC += OFFSET;
			}
		BGE:	10:
			if (RS1 >= RS2) {
				PC += OFFSET;
			}
		BLT:	11:
			if (RS1 < RS2) {
				PC += OFFSET;
			}